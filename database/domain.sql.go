// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: domain.sql

package database

import (
	"context"
)

const addDomain = `-- name: AddDomain :exec
INSERT OR
REPLACE
INTO domains (domain, active)
VALUES (?, ?)
`

type AddDomainParams struct {
	Domain string `json:"domain"`
	Active bool   `json:"active"`
}

func (q *Queries) AddDomain(ctx context.Context, arg AddDomainParams) error {
	_, err := q.db.ExecContext(ctx, addDomain, arg.Domain, arg.Active)
	return err
}

const deleteDomain = `-- name: DeleteDomain :exec
INSERT OR
REPLACE
INTO domains(domain, active)
VALUES (?, false)
`

func (q *Queries) DeleteDomain(ctx context.Context, domain string) error {
	_, err := q.db.ExecContext(ctx, deleteDomain, domain)
	return err
}

const getActiveDomains = `-- name: GetActiveDomains :many
SELECT domain
FROM domains
WHERE active = 1
`

func (q *Queries) GetActiveDomains(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getActiveDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var domain string
		if err := rows.Scan(&domain); err != nil {
			return nil, err
		}
		items = append(items, domain)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
